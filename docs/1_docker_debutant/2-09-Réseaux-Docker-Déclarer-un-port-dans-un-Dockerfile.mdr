---
title: Réseaux Docker Déclarer un port dans un Dockerfile
pre: "<b>2.09 </b>"
weight: 22
---
## Objectifs pédagogiques
  - Comprendre le mode de fonctionnement des ports dans Linux
  - Savoir utiliser la commande EXPOSE


### Exposer le port

- Ajoutons l'instruction `EXPOSE 5000` pour indiquer à Docker que cette app est censée être accédée via son port `5000`.
- NB : Publier le port grâce à l'option `-p port_de_l-hote:port_du_container` reste nécessaire, l'instruction `EXPOSE` n'est là qu'à titre de documentation de l'image.

- Lancez un conteneur Nginx. Notez que lorsque l'image est déjà téléchargée le lancement d'un conteneur est quasi instantané.

```bash
docker run --name "test_nginx" nginx
```
Ce conteneur n'est pas très utile, car on a oublié de configurer un port exposé sur `localhost`.

- Trouvez un moyen d'accéder quand même au Nginx à partir de l'hôte Docker (indice : quelle adresse IP le conteneur possède-t-il ?).

{{% expand "Solution :" %}}

- Dans un nouveau terminal lancez `docker inspect test_nginx` (c'est le nom de votre conteneur Nginx). Cette commande fournit plein d'informations utiles mais difficiles à lire.

- Lancez la commande à nouveau avec `| grep IPAddress` à la fin. Vous récupérez alors l'adresse du conteneur dans le réseau virtuel Docker.

{{% /expand %}}

- Arrêtez le(s) conteneur(s) `nginx` créé(s).
- Relancez un nouveau conteneur `nginx` avec cette fois-ci le port correctement configuré dès le début pour pouvoir visiter votre Nginx en local.

```bash
docker run -p 8080:80 --name "test2_nginx" nginx # la syntaxe est : port_hote:port_container
```

- En visitant l'adresse et le port associé au conteneur Nginx, on doit voir apparaître des logs Nginx dans son terminal car on a lancé le conteneur en mode _attach_.
- Supprimez ce conteneur. NB : On doit arrêter un conteneur avant de le supprimer, sauf si on utilise l'option "-f".

---

On peut lancer des logiciels plus ambitieux, comme par exemple Funkwhale, une sorte d'iTunes en web qui fait aussi réseau social :

```bash
docker run --name funky_conteneur -p 80:80 funkwhale/all-in-one:1.0.1
```

Vous pouvez visiter ensuite ce conteneur Funkwhale sur le port 80 (après quelques secondes à suivre le lancement de l'application dans les logs) ! Mais il n'y aura hélas pas de musique dedans :(

_Attention à ne jamais lancer deux containers connectés au même port sur l'hôte, sinon cela échouera !_

- Supprimons ce conteneur :

```bash
docker rm -f funky_conteneur
```

### _Facultatif :_ Wordpress, MYSQL et les variables d'environnement

- Lancez un conteneur Wordpress joignable sur le port `8080` à partir de l'image officielle de Wordpress du Docker Hub
- Visitez ce Wordpress dans le navigateur

Nous pouvons accéder au Wordpress, mais il n'a pas encore de base MySQL configurée. Ce serait un peu dommage de configurer cette base de données à la main. Nous allons configurer cela à partir de variables d'environnement et d'un deuxième conteneur créé à partir de l'image `mysql`.

Depuis Ubuntu:

- Il va falloir mettre ces deux conteneurs dans le même réseau (nous verrons plus tarde ce que cela implique), créons ce réseau :

```bash
docker network create wordpress
```

- Cherchez le conteneur `mysql` version 5.7 sur le Docker Hub.

- Utilisons des variables d'environnement pour préciser le mot de passe root, le nom de la base de données et le nom d'utilisateur de la base de données (trouver la documentation sur le Docker Hub).

- Il va aussi falloir définir un nom pour ce conteneur

{{% expand "Résultat :" %}}

```bash
docker run --name mysqlpourwordpress -d -e MYSQL_ROOT_PASSWORD=motdepasseroot -e MYSQL_DATABASE=wordpress -e MYSQL_USER=wordpress -e MYSQL_PASSWORD=monwordpress --network wordpress mysql:5.7
```

{{% /expand %}}

- inspectez le conteneur MySQL avec `docker inspect`

- Faites de même avec la documentation sur le Docker Hub pour préconfigurer l'app Wordpress.
- En plus des variables d'environnement, il va falloir le mettre dans le même réseau, et exposer un port

{{% expand "Solution :" %}}

```bash
docker run --name wordpressavecmysql -d -e WORDPRESS_DB_HOST="mysqlpourwordpress:3306" -e WORDPRESS_DB_PASSWORD=monwordpress -e WORDPRESS_DB_USER=wordpress --network wordpress -p 80:80 wordpress
```

{{% /expand %}}

- regardez les logs du conteneur Wordpress avec `docker logs`

- visitez votre app Wordpress et terminez la configuration de l'application : si les deux conteneurs sont bien configurés, on ne devrait pas avoir à configurer la connexion à la base de données
- avec `docker exec`, visitez votre conteneur Wordpress. Pouvez-vous localiser le fichier `wp-config.php` ? Une fois localisé, utilisez `docker cp` pour le copier sur l'hôte.
<-- - (facultatif) Détruisez votre conteneur Wordpress, puis recréez-en un et poussez-y votre configuration Wordpress avec `docker cp`. Nous verrons ensuite une meilleure méthode pour fournir un fichier de configuration à un conteneur. -->
