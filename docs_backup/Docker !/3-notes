
---

## Instruction `ENV`

- Une façon recommandée de configurer vos applications Docker est d'utiliser les variables d'environnement UNIX, ce qui permet une configuration "au _runtime_".

---

## Instruction `HEALTHCHECK`

`HEALTHCHECK` permet de vérifier si l'app contenue dans un conteneur est en bonne santé.

```bash
HEALTHCHECK CMD curl --fail http://localhost:5000/health || exit 1
```

---

## Les variables
On peut utiliser des variables d'environnement dans les Dockerfiles. La syntaxe est `${...}`.
Exemple :
```Dockerfile
FROM busybox
ENV FOO=/bar
WORKDIR ${FOO}   # WORKDIR /bar
ADD . $FOO       # ADD . /bar
COPY \$FOO /quux # COPY $FOO /quux
```

Se référer au [mode d'emploi](https://docs.docker.com/engine/reference/builder/#environment-replacement) pour la logique plus précise de fonctionnement des variables.



### Faire varier la configuration en fonction de l'environnement

Le serveur de développement Flask est bien pratique pour debugger en situation de développement, mais n'est pas adapté à la production.
Nous pourrions créer deux images pour les deux situations mais ce serait aller contre l'impératif DevOps de rapprochement du dev et de la prod.

Pour démarrer l’application, nous avons fait appel à un script de boot `boot.sh` avec à l’intérieur :

```bash
#!/bin/bash

# ...

set -e
if [ "$CONTEXT" = 'DEV' ]; then
    echo "Running Development Server"
    FLASK_ENV=development exec flask run -h 0.0.0.0
else
    echo "Running Production Server"
    exec gunicorn -b :5000 --access-logfile - --error-logfile - app_name:app
fi
```

- Déclarez maintenant dans le Dockerfile la variable d'environnement `CONTEXT` avec comme valeur par défaut `PROD`.

- Construisez l'image avec `build`.
- Puis, grâce aux bons arguments allant avec `docker run`, lancez une instance de l'app en configuration `PROD` et une instance en environnement `DEV` (joignables sur deux ports différents).
- Avec `docker ps` ou en lisant les logs, vérifiez qu'il existe bien une différence dans le programme lancé.



### Dockerfile amélioré

<details><summary>`Dockerfile` final :</summary>

```Dockerfile
FROM python:3.9-slim

# Permet à flask de savoir quel fichier exécuter
ENV FLASK_APP microblog.py
# Par défaut, l'image ci-dessus a comme utilisateur courant `root` : c'est une bonne pratique de sécurité de créer un user adéquat pour notre application (la justification détaillée se trouve dans les articles de la bibliographie)
WORKDIR /
COPY requirements.txt requirements.txt
# On fait une étape d'installation des requirements avant pour tirer partie du système de cache de Docker lors de la construction des images
RUN pip3 install -r requirements.txt
RUN useradd --system flask
# On copie des fichiers qui changent moins souvent avant pour le cache
COPY microblog.py config.py boot.sh /microblog/
WORKDIR /microblog
COPY migrations/ migrations
COPY app/ app

RUN chown -R flask /microblog
ENV CONTEXT PROD

# A titre de documentation entre le maintainer de l'image et les gens l'utilisant :
EXPOSE 5000

USER flask
CMD ["./boot.sh"]

```


## L'instruction HEALTHCHECK

`HEALTHCHECK` permet de vérifier si l'app contenue dans un conteneur est en bonne santé.

- Dans un nouveau dossier ou répertoire, créez un fichier `Dockerfile` dont le contenu est le suivant :

```Dockerfile
FROM python:alpine

RUN apk add curl
RUN pip install flask

ADD /app.py /app/app.py
WORKDIR /app
EXPOSE 5000

HEALTHCHECK CMD curl --fail http://localhost:5000/health || exit 1

CMD python app.py
```

- Créez aussi un fichier `app.py` avec ce contenu :

```python
from flask import Flask

healthy = True

app = Flask(__name__)

@app.route('/health')
def health():
    global healthy

    if healthy:
        return 'OK', 200
    else:
        return 'NOT OK', 500

@app.route('/kill')
def kill():
    global healthy
    healthy = False
    return 'You have killed your app.', 200


if __name__ == "__main__":
    app.run(host="0.0.0.0")
```

- Observez bien le code Python et la ligne `HEALTHCHECK` du `Dockerfile` puis lancez l'app. A l'aide de `docker ps`, relevez où Docker indique la santé de votre app.
- Visitez l'URL `/kill` de votre app dans un navigateur. Refaites `docker ps`. Que s'est-il passé ?

- _(Facultatif)_ Rajoutez une instruction `HEALTHCHECK` au `Dockerfile` de notre app microblog.

---

## Isolation des conteneurs

- Les conteneurs sont plus que des processus, ce sont des boîtes isolées grâce aux **namespaces** et **cgroups**

- Depuis l'intérieur d'un conteneur, on a l'impression d'être dans un Linux autonome.

- Plus précisément, un conteneur est lié à un système de fichiers (avec des dossiers `/bin`, `/etc`, `/var`, des exécutables, des fichiers...), et possède des métadonnées (stockées en `json` quelque part par Docker)

- Les utilisateurs Unix à l'intérieur du conteneur ont des UID et GID qui existent classiquement sur l'hôte mais ils peuvent correspondre à un utilisateur Unix sans droits sur l'hôte si on utilise les _user namespaces_.

<-- - Malgré l'isolation il est possible d'exploiter des failles de configuration pour s'échapper d'un conteneur
- => il faut faire attention à ne pas lancer les applications en `root` à l'intérieur des conteneurs Docker et/ou à utiliser les *user namespaces* -->

---

# Terminologie et concepts fondamentaux

Deux concepts centraux :

- Une **image** : un modèle pour créer un conteneur
- Un **conteneur** : l'instance qui tourne sur la machine.

Autres concepts primordiaux :

- Un **volume** : un espace virtuel pour gérer le stockage d'un conteneur et le partage entre conteneurs.
- un **registry** : un serveur ou stocker des artefacts docker c'est à dire des images versionnées.
- un **orchestrateur** : un outil qui gère automatiquement le cycle de vie des conteneurs (création/suppression).

---

# Visualiser l'architecture Docker

---

# L'écosystème Docker

- **Docker Compose** : Un outil pour décrire des applications multiconteneurs.

- **Docker Machine** : Un outil pour gérer le déploiement Docker sur plusieurs machines depuis un hôte.

- **Docker Hub** : Le service d'hébergement d'images proposé par Docker Inc. (le registry officiel)

---
# En résumé

## Daemon - Client - images - registry






